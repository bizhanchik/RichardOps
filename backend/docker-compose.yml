services:
  monitoring-backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: monitoring-backend-prod
    ports:
      - "8000:8000"
    volumes:
      # Use Docker-managed volume for logs
      - logs_data:/app/logs
      # Mount configuration file
      - ./.env:/app/.env:ro
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - monitoring-network
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  postgres:
    image: postgres:15-alpine
    container_name: monitoring-postgres-prod
    environment:
      POSTGRES_DB: monitoring
      POSTGRES_USER: monitoring_user
      POSTGRES_PASSWORD: monitoring_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U monitoring_user -d monitoring"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'



volumes:
  postgres_data:
    driver: local
  logs_data:
    driver: local

networks:
  monitoring-network:
    driver: bridge
